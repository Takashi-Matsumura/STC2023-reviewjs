/* JavaScriptファイルの実行は、ターミナルを開いて、ディレクトリ（chapter4）に移動して、コマンド（node review4）を実行します。 */
// Ctrl + J
// > cd chapter4
// > node review4.js

// 関数:-----------------------------------------------------
/* 
    関数とは、インプット（入力）を受け取り、何らかの処理を行ってから
    結果としてアウトプット（出力）を返す、一連の処理のまとまりのこと。

    関数を使って処理をまとめることによって、同じ処理を何度も書く必要がなくなり、
    コードの再利用性や保守性を高めることができる。
 */

// 関数宣言による関数の定義：-------------------------------------------
// function 関数名( [ 引数1, 引数2, ... ] ) {
//     関数を実行したいときに、実行したいコード
//     [ return 戻り値; ]
// }

// 関数の宣言
function sum( val1, val2 ) {
    return val1 + val2;
}

// 関数の実行
let result = sum(10, 20);
console.log(result);


// 関数式による関数定義：---------------------------------------------
// 関数の定義は、代入演算子を使って変数に対して関数式を代入することもできる
//
// const 関数名 = function( [ 引数1, 引数2, ... ] ) {
//     何らかの処理
//     [ return 戻り値; ]
// }

const minux = function( val1, val2 ) {
    return val1 - val2;
}
console.log(minux(10, 5));

// 関数宣言と関数式の違い１ --- 関数名の重複
// ・関数宣言の場合
//   関数名が重複していてもエラーにはならず、あとから宣言された関数によって機能が上書きされる
// ・関数式の場合
//   エラーが発生する。

// 関数宣言と関数式の違い２　--- 実行文の記述の位置
// ・関数宣言の場合
//   関数の宣言文より前に実行文を記述できる。
// ・関数式の場合
//   関数定義より前に実行文を記述するとエラーが発生する。


// コールバック関数：-----------------------------------------------
// コールバック関数とは、他の関数に引数として渡す関数のことです。
// JavaScriptにおける関数とは実行可能なオブジェクトです。

function fn() {}

fn.fullName = "独習太郎";
fn.hello = function() {
    console.log("こんにちは、独習太郎");
}
console.log(fn.fullName);
fn.hello();

/* 
    関数はオブジェクトの一種なので、オブジェクトのように他の関数の引数として
    渡すことができる。この引数で渡される関数のことをコールバック関数と呼ぶ。
    コールバック関数は、通常、引数として渡された関数内で実行される。
 */

// コールバックの関数の記法
// function fn( callback ) {
//     通常の関数と同様に処理を記述可能

//     let result = callback( [param1, param2, ... ] ); -- コールバック関数の実行

//     通常の関数と同様に処理を記述可能
// }

function saySomething ( callback ) {
    const result = callback();
    console.log(`${result}、独習太郎！`);
}

function hello() {
    return "こんにちは";
}

function bye() {
    return "さようなら";
}

saySomething(hello);
saySomething(bye);

// コールバック関数に引数を渡すパターン
function hello(name) {
    console.log("こんにちは、"+name);
}
setTimeout(hello, 3000, "独習太郎");

// 無名関数をコールバック関数として使用
setTimeout( function() {
    console.log("こんにちは");
}, 3000 );


// アロー関数：--------------------------------------------------
/* 
    アロー関数とは、ES6で追加された無名関数の省略記法のこと。
    アロー関数は、引数の個数や関数の本文の行数によって、省略できる度合いが変わってくる。
*/

setTimeout( () => console.log("こんにちは"), 1000);

// アロー関数の記法：-----------------------------------------------
//　１．引数がない場合
//  アロー関数の先頭の()は省略できない。
//  () => { 関数の本文; };

//　２．引数が１つの場合
//  アロー関数の先頭の()は省略できる
//  引数 => { 関数の本文; };

//　３．引数が複数の場合
//  アロー関数の先頭の()は省略できない。
//  ( 引数1, 引数2, ... ) => { 関数の本文; };

//　４．関数の本文（実行文）が１行の場合
//  {}を省略できる。また、関数の本文は、そのまま戻り値となる。
//  ( 引数1, 引数2, ... ) => 関数の本文;

//　５．関数の本文（実行文）が複数行の場合
//  {}は省略できない。戻り値を返す場合には、return文を明記する。
// ( 引数1, 引数2, ... ) => {
//     関数の本文;
//     return 戻り値;
// }

//　６．関数の本文（実行文）が１行かつ戻り値がオブジェクトの場合
//  オブジェクトリテラル{}を丸かっこ()で囲む。
//  これはアロー関数の本文を囲む括弧{}の部分と記述を区別するため。